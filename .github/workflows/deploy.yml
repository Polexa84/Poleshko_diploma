name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB_NAME: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        for i in {1..15}; do
          if pg_isready -h localhost -p 5432 -U postgres -d testdb; then
            echo "PostgreSQL ready!"
            exit 0
          fi
          echo "Waiting for PostgreSQL... ($i/15)"
          sleep 2
        done
        echo "PostgreSQL not ready!"
        exit 1

    - name: Set up database
      working-directory: .
      run: python manage.py migrate
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

    - name: Run tests
      working-directory: .
      run: python manage.py test --settings=booking_system.settings
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Add server host key to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Reset environment
      run: |
        echo "Resetting environment..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          set -x
  
          echo "Setting environment variables..."
          export POSTGRES_USER="postgres"
          export POSTGRES_PASSWORD="password"
          export POSTGRES_DB="testdb"
          export PROJECT_DIR="/home/deployer/Poleshko_diploma"
  
          # Drop database if exists
          echo "Dropping database..."
          psql -U "$POSTGRES_USER" -d postgres -c "DROP DATABASE IF EXISTS $POSTGRES_DB" || { echo "Error dropping database"; exit 1; }
  
          # Remove project directory if exists
          echo "Removing project directory..."
          rm -rf "$PROJECT_DIR" || { echo "Error removing project directory"; exit 1; }
  
          echo "Environment reset successfully."
        EOF
        echo "Environment reset on server."

    - name: Copy project files to server
      run: |
        echo "Copying project files to server..."
        export RSYNC_RSH="ssh -o StrictHostKeyChecking=no"
        rsync -avz --delete --exclude '__pycache__' --exclude 'venv' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
        echo "Files copied."

    - name: Install dependencies, apply migrations, collect static files
      run: |
        echo "Executing commands on server..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          set -x
  
          echo "Setting environment variables..."
          export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
          export POSTGRES_USER="postgres"
          export POSTGRES_PASSWORD="password"
          export POSTGRES_DB="testdb"
          export POSTGRES_HOST="localhost"
          export POSTGRES_PORT="5432"
  
          PROJECT_DIR="/home/deployer/Poleshko_diploma"
          VENV_DIR="$PROJECT_DIR/venv"
          cd "$PROJECT_DIR"
  
          echo "Creating virtual environment..."
          python3 -m venv venv || { echo "Error creating virtual environment"; exit 1; }
  
          echo "Activating virtual environment..."
          source "$VENV_DIR/bin/activate" || { echo "Error activating virtual environment"; exit 1; }
  
          echo "Installing project dependencies..."
          "$VENV_DIR/bin/pip" install --upgrade pip || { echo "Error upgrading pip"; exit 1; }
          "$VENV_DIR/bin/pip" install -r requirements.txt || { echo "Error installing dependencies"; exit 1; }
  
          echo "Applying database migrations..."
          "$VENV_DIR/bin/python" manage.py migrate || { echo "Error applying migrations"; exit 1; }
  
          echo "Collecting static files..."
          "$VENV_DIR/bin/python" manage.py collectstatic --noinput || { echo "Error collecting static files"; exit 1; }
  
          echo "Deployment commands executed successfully."
        EOF
        echo "Commands executed on server."

    - name: Restart application
      run: |
        echo "Restarting application..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          set -x
          if systemctl is-active --quiet gunicorn.service; then
            sudo systemctl restart gunicorn.service
          else
            echo "Gunicorn service is not running."
          fi
          sudo systemctl reload nginx
        EOF
        echo "Application restarted."