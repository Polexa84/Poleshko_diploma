name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Prepare database
      run: |
        echo "Waiting for PostgreSQL to start..."
        export PGPASSWORD=$POSTGRES_PASSWORD
        while ! pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d postgres; do
          echo "PostgreSQL is not ready yet, waiting..."
          sleep 5
        done
        echo "PostgreSQL is ready!"
        psql -v ON_ERROR_STOP=1 -U $POSTGRES_USER -d postgres -c "CREATE DATABASE $POSTGRES_DB;"
        python manage.py migrate
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: testdb

    - name: Run tests
      run: python manage.py test --noinput
      env:
        DJANGO_SETTINGS_MODULE: myproject.settings # Укажите модуль настроек
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Add server host key to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Copy project files to server
      run: |
        export RSYNC_RSH="ssh -o StrictHostKeyChecking=no"
        rsync -avz --delete \
          --exclude '__pycache__' \
          --exclude '.env*' \
          --exclude '.git' \
          --exclude 'venv' \
          . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Deploy application
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'DEPLOY'
        set -e
        set -x
        cd ${{ secrets.DEPLOY_DIR }}

        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate

        # Install dependencies
        pip install --upgrade pip
        pip install -r requirements.txt

        # Set environment variables (using .env file is recommended)
        export DJANGO_SETTINGS_MODULE=myproject.settings
        export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
        export POSTGRES_USER="postgres"
        export POSTGRES_PASSWORD="password"
        export POSTGRES_DB="testdb"

        # Apply migrations and collect static files
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput

        echo "Deployment completed successfully."
        DEPLOY

    - name: Restart services
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'RESTART'
        set -e
        set -x
        sudo systemctl restart gunicorn
        sudo systemctl reload nginx
        echo "Services restarted successfully."
        RESTART