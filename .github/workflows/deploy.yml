name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB_NAME: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        for i in {1..15}; do
          if pg_isready -h localhost -p 5432 -U postgres -d testdb; then
            echo "PostgreSQL ready!"
            exit 0
          fi
          echo "Waiting for PostgreSQL... ($i/15)"
          sleep 2
        done
        echo "PostgreSQL not ready!"
        exit 1

    - name: Set up database
      working-directory: .
      run: python manage.py migrate
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

    - name: Run tests
      working-directory: .
      run: python manage.py test --settings=booking_system.settings
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Add server host key to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Copy project files to server
      run: |
        echo "Copying project files to server..."
        export RSYNC_RSH="ssh -o StrictHostKeyChecking=no"  # <---- Указываем опцию для ssh
        rsync -avz --delete --exclude '__pycache__' --exclude 'db.sqlite3' --exclude 'static' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
        echo "Files copied."

    - name: Install dependencies, apply migrations, collect static files
      run: |
        echo "Executing commands on server..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e  # Выходить при первой ошибке
          set -x  # Подробный вывод выполняемых команд
  
          echo "Checking Python version..."
          python3 --version
  
          echo "Changing directory to deployment folder..."
          PROJECT_DIR="${{ secrets.DEPLOY_DIR }}" # Используйте переменную DEPLOY_DIR
          cd "$PROJECT_DIR"
  
          echo "Setting environment variables..."
          export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
          export POSTGRES_USER="postgres"
          export POSTGRES_PASSWORD="password"
          export POSTGRES_DB="testdb"
          export POSTGRES_HOST="localhost"
          export POSTGRES_PORT="5432"
  
          # Use an absolute path for the venv directory
          VENV_DIR="$PROJECT_DIR/venv"
  
          # Add debugging information
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "VENV_DIR: $VENV_DIR"
  
          echo "Checking if venv directory exists: ls -l $PROJECT_DIR"
          ls -l "$PROJECT_DIR"
          echo "Checking if activate script exists: ls -l $VENV_DIR/bin"
          ls -l "$VENV_DIR/bin"
  
          # Assume venv already exists
          if [ ! -f "$VENV_DIR/bin/activate" ]; then
            echo "Error: venv/bin/activate not found!"
            exit 1
          fi
  
          echo "Activating virtual environment..."
          source "$VENV_DIR/bin/activate"
  
          echo "Checking Python version in venv..."
          python --version
  
          echo "Installing project dependencies..."
          pip install --upgrade pip
          pip install -r requirements.txt
  
          echo "Applying database migrations..."
          python manage.py migrate
  
          echo "Collecting static files..."
          python manage.py collectstatic --noinput
  
          echo "Deployment commands executed successfully."
        EOF

    - name: Restart services
      run: |
        echo "Restarting application services..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          set -x
          sudo systemctl restart gunicorn
          sudo systemctl reload nginx
          echo "Services restarted successfully."
        EOF
