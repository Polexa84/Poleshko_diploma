name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"

    env:
      DJANGO_SETTINGS_MODULE: booking_system.settings_test
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      POSTGRES_HOST: postgres  # Изменено с localhost на postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_URL: redis://redis:6379/0  # Изменено с localhost на redis
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create static directory
      run: mkdir -p static

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev python3-dev

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h postgres -p 5432; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting..."
          sleep 1
        done

    - name: Run migrations
      run: |
        python manage.py check --database default
        python manage.py migrate --noinput

    - name: Run tests
      run: |
        python manage.py test --noinput

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Configure known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Rsync project files
      run: |
        rsync -avz --delete \
          --exclude '__pycache__' \
          --exclude '.env*' \
          --exclude '.git' \
          --exclude 'venv' \
          . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Deploy on server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -e
        cd ${{ secrets.DEPLOY_DIR }}

        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi

        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt psycopg2-binary

        cat > .env.prod <<EOL
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG=False
        POSTGRES_DB_NAME=testdb
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=password
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        REDIS_HOST=localhost
        REDIS_PORT=6379
        EMAIL_HOST_USER=Elfinator84@yandex.ru
        EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
        EOL

        mkdir -p static
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput

        sudo systemctl restart gunicorn
        sudo systemctl reload nginx
        EOF