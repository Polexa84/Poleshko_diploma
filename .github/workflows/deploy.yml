name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB_NAME: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        for i in {1..15}; do
          if pg_isready -h localhost -p 5432 -U postgres -d testdb; then
            echo "PostgreSQL ready!"
            exit 0
          fi
          echo "Waiting for PostgreSQL... ($i/15)"
          sleep 2
        done
        echo "PostgreSQL not ready!"
        exit 1

    - name: Set up database
      working-directory: .
      run: python manage.py migrate
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

    - name: Run tests
      working-directory: .
      run: python manage.py test --settings=booking_system.settings
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add server host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy project files to server
        run: |
          echo "Copying project files to server..."
          export RSYNC_RSH="ssh -o StrictHostKeyChecking=no"
          rsync -avz --delete \
            --exclude '__pycache__' \
            --exclude '.env*' \
            --exclude '.git' \
            --exclude 'venv' \
            . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Deploy application
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'DEPLOY'
          set -e
          cd "${{ secrets.DEPLOY_DIR }}"
  
          # Создаем .env.prod файл с вашими настройками
          cat > .env.prod << 'ENV'
          # ===== PostgreSQL =====
          POSTGRES_DB_NAME=booking_system
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=новый_пароль
          POSTGRES_HOST=localhost  # На сервере используем localhost вместо db
          POSTGRES_PORT=5432
  
          # ===== Redis =====
          REDIS_HOST=localhost  # На сервере используем localhost вместо redis
          REDIS_PORT=6379
          REDIS_DB=0
  
          # ===== Email =====
          EMAIL_HOST=smtp.yandex.ru
          EMAIL_PORT=465
          EMAIL_HOST_USER=Elfinator84@yandex.ru
          EMAIL_HOST_PASSWORD=xcsvzumxsevzgnea
          EMAIL_USE_SSL=True
          DEFAULT_FROM_EMAIL=Elfinator84@yandex.ru
  
          # ===== Django =====
          DJANGO_SECRET_KEY=django-insecure-n\$u+0k-m02adu7=a*u9w+_dc@_a!qef@y1@^8w)=a\$7a2kyan^
          DEBUG=False  # На продакшене выключаем debug
          ALLOWED_HOSTS=ваш_домен,158.160.182.77,localhost
  
          # ===== Celery =====
          CELERY_BROKER_URL=redis://localhost:6379/0
          CELERY_RESULT_BACKEND=redis://localhost:6379/0
          ENV
  
          # Настройка PostgreSQL
          sudo sed -i 's/local   all             postgres                                peer/local   all             postgres                                md5/' /etc/postgresql/*/main/pg_hba.conf
          sudo systemctl restart postgresql
  
          # Создаем venv если его нет
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
  
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
  
          # Применяем миграции
          python manage.py migrate
  
          # Собираем статику
          mkdir -p static
          python manage.py collectstatic --noinput
  
          echo "Deployment completed successfully!"
          DEPLOY

      - name: Restart services
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'RESTART'
          set -e
          sudo systemctl restart gunicorn
          sudo systemctl restart celery
          sudo systemctl restart celery-beat
          sudo systemctl reload nginx
          RESTART